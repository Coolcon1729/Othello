{"version":3,"sources":["index.js"],"names":["Square","content","value","onClick","indicator","placed","r","fill","style","strokeWidth","fillOpacity","alert","className","Board","i","j","key","this","props","squares","items","row","push","renderSquare","React","Component","Game","middle","Math","floor","newSquares","Array","map","x","newFlipSquares","B","W","state","history","flipSquares","blackScore","whiteScore","bIsNext","turn","slice","current","length","currentPlayer","nextPlayer","arr","square","directions","nextRegex","RegExp","currentRegex","n","m","test","direction","line","y","includes","noMoves","hasMoves","setState","concat","status","size","handleClick","undo","disabled","App","player","reduce","sum","val","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.150ea3df.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst size = 8;\n\nfunction Square({value, onClick, placed}) {\n    let content;\n    // holds a red dot if the disk was just placed\n    const indicator = placed ? <circle r=\"3px\" fill=\"#FF0000\" style={{strokeWidth:\"0px\"}}/> : null;\n\n    // determine what to display\n    switch (value) {\n        case \" \":\n            content = \"\";\n            break;\n        case \"O\":\n            content = <svg><circle r=\"30px\" fillOpacity=\"0\"/>{indicator}</svg>;\n            break;  \n        case \"B\":\n            content = <svg><circle r=\"30px\" fillOpacity=\"0.95\" fill=\"#101010\"/>{indicator}</svg>;\n            break;\n        case \"W\":\n            content = <svg><circle r=\"30px\" fillOpacity=\"0.95\" fill=\"#F0F0F0\"/>{indicator}</svg>;\n            break;\n        default:\n            alert(\"Something ain't right here.\");\n    }\n    return(\n        <button\n            className=\"square\"\n            onClick={onClick}\n        >{content}</button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i, j) {\n        return(\n            <Square\n                key={size * i + j}\n                value={this.props.squares[i][j]}\n                onClick={() => this.props.onClick(i, j)}\n                placed={this.props.placed && i === this.props.placed[0] && j === this.props.placed[1]}\n            />\n        );\n    }\n    render() {\n        // build a 2D array of squares.\n        let items = [];\n        for (let i = 0; i < size; i++) {\n            let row = [];\n            for (let j = 0; j < size; j++) {\n                row.push(this.renderSquare(i, j));\n            }\n            items.push(<div className=\"board-row\" key={i}>{row}</div>);\n        }\n        return(\n            <div>\n                {items}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // middle of the board\n        const middle = Math.floor((size - 1) / 2);\n\n        // holds the state of each square on the board\n        // W: White, B: Black, O: Open, \" \": Not Open\n        const newSquares = Array(size).fill(null).map(x => Array(size).fill(\" \"));\n        // holds which tiles will be flipped when played for each colour\n        const newFlipSquares = {\n            B: Array(size).fill(null).map(x => Array(size).fill(null).map(x => [])),\n            W: Array(size).fill(null).map(x => Array(size).fill(null).map(x => []))            \n        };\n\n        // Initialize fresh board.\n        newSquares[middle][middle] = newSquares[middle + 1][middle + 1] = \"W\";\n        newSquares[middle][middle + 1] = newSquares[middle + 1][middle] = \"B\";\n        newSquares[middle - 1][middle] = newSquares[middle][middle - 1] =\n        newSquares[middle + 1][middle + 2] = newSquares[middle + 2][middle + 1] = \"O\";\n\n        newFlipSquares[\"B\"][middle - 1][middle].push([middle, middle]);\n        newFlipSquares[\"B\"][middle][middle - 1].push([middle, middle]);\n        newFlipSquares[\"B\"][middle + 1][middle + 2].push([middle + 1, middle + 1]);\n        newFlipSquares[\"B\"][middle + 2][middle + 1].push([middle + 1, middle + 1]);\n        newFlipSquares[\"W\"][middle - 1][middle + 1].push([middle, middle + 1]);\n        newFlipSquares[\"W\"][middle][middle + 2].push([middle, middle + 1]);\n        newFlipSquares[\"W\"][middle + 1][middle - 1].push([middle + 1, middle]);\n        newFlipSquares[\"W\"][middle + 2][middle].push([middle + 1, middle]);\n\n        // Initialize the game state.\n        this.state = {\n            history: [{\n                squares: newSquares,\n                flipSquares: newFlipSquares,\n                placed: null,\n                blackScore: 2,\n                whiteScore: 2\n            }],\n            bIsNext: true,\n            turn: 0\n        };\n    }\n    handleClick(i, j) {\n        const history = this.state.history.slice(0, this.state.turn + 1);\n        const current = history[history.length - 1];\n        const currentPlayer = this.state.bIsNext ? \"B\" : \"W\";\n        const nextPlayer = this.state.bIsNext ? \"W\" : \"B\";\n\n        // If it is not a valid square, do nothing.\n        if (!current.flipSquares[currentPlayer][i][j].length) return;\n        \n        const squares = current.squares.map(arr => arr.slice());\n        let blackScore = current.blackScore;\n        let whiteScore = current.whiteScore;\n        \n        // Update the state of the squares and the value of the scores. (Flipping and Scoring)\n        squares[i][j] = currentPlayer;\n        this.state.bIsNext ? blackScore++ : whiteScore++;\n        for (let square of current.flipSquares[currentPlayer][i][j]) {\n            squares[square[0]][square[1]] = currentPlayer;\n            if (this.state.bIsNext) {\n                blackScore++;\n                whiteScore--;\n            } else {\n                whiteScore++;\n                blackScore--;\n            }\n        }\n\n        // For each square on the board determine which squares will be flipped when clicked.\n        const flipSquares = {\n            B: Array(size).fill(null).map(x => Array(size).fill(null).map(x => [])),\n            W: Array(size).fill(null).map(x => Array(size).fill(null).map(x => []))            \n        };\n        const directions = [\n            [1, 0],\n            [1, 1],\n            [0, 1],\n            [-1, 1],\n            [-1, 0],\n            [-1, -1],\n            [0, -1],\n            [1, -1]\n        ];\n        const nextRegex = new RegExp(\"^[O ]\" + currentPlayer + \"+\" + nextPlayer);\n        const currentRegex = new RegExp(\"^[O ]\" + nextPlayer + \"+\" + currentPlayer);\n        for (let n = 0; n < size; n++) {\n            for (let m = 0; m < size; m++) {\n                if (/[BW]/.test(squares[n][m])) continue;\n                for (let direction of directions) {\n                    let line = \"\";\n                    let x = n;\n                    let y = m;\n                    do {\n                        line += squares[x][y];\n                        x += direction[0];\n                        y += direction[1];\n                    } while (x >= 0 && x < size && y >= 0 && y < size && !line.includes(\"  \"))\n                    if (nextRegex.test(line)) {\n                        x = n + direction[0];\n                        y = m + direction[1];\n                        while (squares[x][y] === currentPlayer) {\n                            flipSquares[nextPlayer][n][m].push([x, y]);\n                            x += direction[0];\n                            y += direction[1];\n                        }\n                    }\n                    if (currentRegex.test(line)) {\n                        x = n + direction[0];\n                        y = m + direction[1];\n                        while (squares[x][y] === nextPlayer) {\n                            flipSquares[currentPlayer][n][m].push([x, y]);\n                            x += direction[0];\n                            y += direction[1];\n                        }\n                    }\n                }\n            }\n        }\n\n        // determines whether the next player will have any moves on the next turn\n        const noMoves = !hasMoves(flipSquares, nextPlayer);\n\n        // Update the state of each square based on the new flipSquare.\n        for (let n = 0; n < size; n++) {\n            for (let m = 0; m < size; m++) {\n                if (/[BW]/.test(squares[n][m])) continue;\n                if (flipSquares[noMoves ? currentPlayer : nextPlayer][n][m].length) {\n                    squares[n][m] = \"O\";\n                } else {\n                    squares[n][m] = \" \";\n                }\n            }\n        }\n\n        // Set the new state.\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                flipSquares: flipSquares,\n                placed: [i, j],\n                blackScore: blackScore,\n                whiteScore: whiteScore\n            }]),\n            bIsNext: !this.state.bIsNext ^ noMoves,\n            turn: this.state.turn + 1\n        });\n    }\n    undo() {\n        // determines whether the last turn was passed\n        const noMoves = !hasMoves(this.state.history[this.state.turn].flipSquares, this.state.bIsNext ? \"W\" : \"B\");\n        this.setState({\n            history: this.state.history,\n            bIsNext: !this.state.bIsNext ^ noMoves,\n            turn: this.state.turn - 1\n        });\n    }\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.turn];\n\n        // holds current game status\n        let status;\n        if (!(hasMoves(current.flipSquares, \"B\") + hasMoves(current.flipSquares, \"W\"))) {\n            if (current.blackScore === current.whiteScore) {\n                status = \"Draw!\";\n            } else if (current.blackScore > current.whiteScore) {\n                status = `Black has won with ${current.blackScore} points!`;\n            } else {\n                status = `White has won with ${current.whiteScore} points!`;\n            }\n            if (current.blackScore + current.whiteScore < size * size) {\n                status = `No mores moves. ${status}`;\n            }\n        } else {\n            status = `It's ${this.state.bIsNext ? \"Black\" : \"White\"}'s turn!`;\n        }\n\n        return(\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={(i, j) => this.handleClick(i, j)}\n                        placed={current.placed}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <div className=\"scoreDisplay\">\n                        Black: {current.blackScore}  White: {current.whiteScore}\n                    </div>\n                    <button onClick={() => this.undo()} disabled={!this.state.turn}>Undo</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass App extends React.Component {\n    render() {\n        return(\n            <div className=\"app\">\n                <div className=\"header\">\n                    <h1>2 Player Othello</h1>\n                    <h4>How to play</h4>\n                </div>\n                <Game />\n            </div>\n        );\n    }\n}\n\n// =========================\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nfunction hasMoves(flipSquares, player) {\n    return !!flipSquares[player].reduce(\n                (sum, arr) => sum += arr.reduce(\n                    (sum, val) => sum += val.length, 0), 0);\n}"],"sourceRoot":""}