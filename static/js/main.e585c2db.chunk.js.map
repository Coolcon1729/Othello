{"version":3,"sources":["index.js"],"names":["Square","content","value","onClick","indicator","placed","r","fill","fillOpacity","stroke","alert","className","Board","i","j","key","this","props","squares","items","row","push","renderSquare","style","border","height","width","minWidth","React","Component","Game","middle","Math","floor","newSquares","Array","map","x","newFlipSquares","B","W","state","history","flipSquares","blackScore","whiteScore","bIsNext","turn","slice","current","length","currentPlayer","nextPlayer","arr","square","directions","nextRegex","RegExp","currentRegex","n","m","test","direction","line","y","includes","noMoves","hasMoves","setState","concat","status","size","undo","disabled","redo","handleClick","App","gameType","href","target","rel","player","reduce","sum","val","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e585c2db.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst size = 8;\n\nfunction Square({value, onClick, placed}) {\n    let content;\n    // holds a red dot if the disk was just placed\n    const indicator = placed ? <circle r=\"3px\" fill=\"#FF0000\"/> : null;\n\n    // determine what to display\n    switch (value) {\n        case \" \":\n            content = \"\";\n            break;\n        case \"O\":\n            content = <svg>\n                <circle\n                    r=\"30px\"\n                    fillOpacity=\"0\"\n                    stroke=\"#222222\"\n                />\n                {indicator}\n            </svg>\n            break;  \n        case \"B\":\n            content = <svg>\n                <circle\n                    r=\"30px\"\n                    fillOpacity=\"0.95\" \n                    fill=\"#101010\" \n                    stroke=\"#BBBBBB\"\n                />\n                {indicator}\n            </svg>;\n            break;\n        case \"W\":\n            content = <svg>\n                <circle \n                    r=\"30px\" \n                    fillOpacity=\"0.95\" \n                    fill=\"#F0F0F0\" \n                    stroke=\"#222222\"\n                />\n                {indicator}\n            </svg>;\n            break;\n        default:\n            alert(\"Something ain't right here.\");\n    }\n    return(\n        <button\n            className=\"square\"\n            onClick={onClick}\n        >\n            {content}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i, j) {\n        return(\n            <Square\n                key={size * i + j}\n                value={this.props.squares[i][j]}\n                onClick={() => this.props.onClick(i, j)}\n                placed={this.props.placed &&\n                        i === this.props.placed[0] && \n                        j === this.props.placed[1]}\n            />\n        );\n    }\n    render() {\n        // build a 2D array of squares.\n        let items = [];\n        for (let i = 0; i < size; i++) {\n            let row = [];\n            for (let j = 0; j < size; j++) {\n                row.push(this.renderSquare(i, j));\n            }\n            items.push(\n                <div className=\"board-row\" key={i}>\n                    {row}\n                </div>\n            );\n        }\n        return(\n            <div\n                className=\"board\"\n                style={{\n                    border:\"20px solid #FFFFFF\",\n                    height:`${80*size - 4}px`,\n                    width:`${80*size - 4}px`,\n                    minWidth:`${80*size - 4}px`\n                }}\n            >\n                {items}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // middle of the board\n        const middle = Math.floor((size - 1) / 2);\n\n        // holds the state of each square on the board\n        // W: White, B: Black, O: Open, \" \": Not Open\n        const newSquares = Array(size).fill(null).map(x => Array(size).fill(\" \"));\n        // holds which tiles will be flipped when played for each colour\n        const newFlipSquares = {\n            B: Array(size).fill(null).map(x => Array(size).fill(null).map(x => [])),\n            W: Array(size).fill(null).map(x => Array(size).fill(null).map(x => []))            \n        };\n\n        // Initialize fresh board.\n        newSquares[middle][middle] = newSquares[middle + 1][middle + 1] = \"W\";\n        newSquares[middle][middle + 1] = newSquares[middle + 1][middle] = \"B\";\n        newSquares[middle - 1][middle] = newSquares[middle][middle - 1] =\n        newSquares[middle + 1][middle + 2] = newSquares[middle + 2][middle + 1] = \"O\";\n\n        newFlipSquares[\"B\"][middle - 1][middle].push([middle, middle]);\n        newFlipSquares[\"B\"][middle][middle - 1].push([middle, middle]);\n        newFlipSquares[\"B\"][middle + 1][middle + 2].push([middle + 1, middle + 1]);\n        newFlipSquares[\"B\"][middle + 2][middle + 1].push([middle + 1, middle + 1]);\n        newFlipSquares[\"W\"][middle - 1][middle + 1].push([middle, middle + 1]);\n        newFlipSquares[\"W\"][middle][middle + 2].push([middle, middle + 1]);\n        newFlipSquares[\"W\"][middle + 1][middle - 1].push([middle + 1, middle]);\n        newFlipSquares[\"W\"][middle + 2][middle].push([middle + 1, middle]);\n\n        // Initialize the game state.\n        this.state = {\n            history: [{\n                squares: newSquares,\n                flipSquares: newFlipSquares,\n                placed: null,\n                blackScore: 2,\n                whiteScore: 2\n            }],\n            bIsNext: true,\n            turn: 0\n        };\n    }\n    handleClick(i, j) {\n        const history = this.state.history.slice(0, this.state.turn + 1);\n        const current = history[history.length - 1];\n        const currentPlayer = this.state.bIsNext ? \"B\" : \"W\";\n        const nextPlayer = this.state.bIsNext ? \"W\" : \"B\";\n\n        // If it is not a valid square, do nothing.\n        if (!current.flipSquares[currentPlayer][i][j].length) return;\n        \n        const squares = current.squares.map(arr => arr.slice());\n        let blackScore = current.blackScore;\n        let whiteScore = current.whiteScore;\n        \n        // Update the state of the squares and the value of the scores. (Flipping and Scoring)\n        squares[i][j] = currentPlayer;\n        this.state.bIsNext ? blackScore++ : whiteScore++;\n        for (let square of current.flipSquares[currentPlayer][i][j]) {\n            squares[square[0]][square[1]] = currentPlayer;\n            if (this.state.bIsNext) {\n                blackScore++;\n                whiteScore--;\n            } else {\n                whiteScore++;\n                blackScore--;\n            }\n        }\n\n        // For each square on the board determine which squares will be flipped when clicked.\n        const flipSquares = {\n            B: Array(size).fill(null).map(x => Array(size).fill(null).map(x => [])),\n            W: Array(size).fill(null).map(x => Array(size).fill(null).map(x => []))            \n        };\n        const directions = [\n            [1, 0],\n            [1, 1],\n            [0, 1],\n            [-1, 1],\n            [-1, 0],\n            [-1, -1],\n            [0, -1],\n            [1, -1]\n        ];\n        const nextRegex = new RegExp(\"^[O ]\" + currentPlayer + \"+\" + nextPlayer);\n        const currentRegex = new RegExp(\"^[O ]\" + nextPlayer + \"+\" + currentPlayer);\n        for (let n = 0; n < size; n++) {\n            for (let m = 0; m < size; m++) {\n                if (/[BW]/.test(squares[n][m])) continue;\n                for (let direction of directions) {\n                    let line = \"\";\n                    let x = n;\n                    let y = m;\n                    do {\n                        line += squares[x][y];\n                        x += direction[0];\n                        y += direction[1];\n                    } while (x >= 0 && x < size && y >= 0 && y < size && !line.includes(\"  \"))\n                    if (nextRegex.test(line)) {\n                        x = n + direction[0];\n                        y = m + direction[1];\n                        while (squares[x][y] === currentPlayer) {\n                            flipSquares[nextPlayer][n][m].push([x, y]);\n                            x += direction[0];\n                            y += direction[1];\n                        }\n                    }\n                    if (currentRegex.test(line)) {\n                        x = n + direction[0];\n                        y = m + direction[1];\n                        while (squares[x][y] === nextPlayer) {\n                            flipSquares[currentPlayer][n][m].push([x, y]);\n                            x += direction[0];\n                            y += direction[1];\n                        }\n                    }\n                }\n            }\n        }\n\n        // determines whether the next player will have any moves on the next turn\n        const noMoves = !hasMoves(flipSquares, nextPlayer);\n\n        // Update the state of each square based on the new flipSquare.\n        for (let n = 0; n < size; n++) {\n            for (let m = 0; m < size; m++) {\n                if (/[BW]/.test(squares[n][m])) continue;\n                if (flipSquares[noMoves ? currentPlayer : nextPlayer][n][m].length) {\n                    squares[n][m] = \"O\";\n                } else {\n                    squares[n][m] = \" \";\n                }\n            }\n        }\n\n        // Set the new state.\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                flipSquares: flipSquares,\n                placed: [i, j],\n                blackScore: blackScore,\n                whiteScore: whiteScore\n            }]),\n            bIsNext: !this.state.bIsNext ^ noMoves,\n            turn: this.state.turn + 1\n        });\n    }\n    undo() {\n        // determines whether the last turn was passed\n        const noMoves = !hasMoves(this.state.history[this.state.turn].flipSquares, this.state.bIsNext ? \"W\" : \"B\");\n        this.setState({\n            history: this.state.history,\n            bIsNext: !this.state.bIsNext ^ noMoves,\n            turn: this.state.turn - 1\n        });\n    }\n    redo() {\n        // determines whether the last turn was passed\n        const noMoves = !hasMoves(this.state.history[this.state.turn + 1].flipSquares, this.state.bIsNext ? \"W\" : \"B\");\n        this.setState({\n            history: this.state.history,\n            bIsNext: !this.state.bIsNext ^ noMoves,\n            turn: this.state.turn + 1\n        });\n    }\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.turn];\n\n        // holds current game status\n        let status;\n        if (!(hasMoves(current.flipSquares, \"B\") + hasMoves(current.flipSquares, \"W\"))) {\n            if (current.blackScore === current.whiteScore) {\n                status = \"Draw!\";\n            } else if (current.blackScore > current.whiteScore) {\n                status = `Black has won with ${current.blackScore} points!`;\n            } else {\n                status = `White has won with ${current.whiteScore} points!`;\n            }\n            if (current.blackScore + current.whiteScore < size * size) {\n                status = `No mores moves. ${status}`;\n            }\n        } else {\n            status = `It's ${this.state.bIsNext ? \"Black\" : \"White\"}'s turn!`;\n        }\n\n        return(\n            <div\n                className=\"game\"\n                style={{\n                    height:`${80*(size + 2)}px`\n                }}\n            >\n                <div className=\"game-info\">\n                    <div className=\"status\">{status}</div>\n                    <div className=\"scoreDisplay\">\n                        Black: {current.blackScore}  White: {current.whiteScore}\n                    </div>\n                    <button onClick={() => this.undo()} disabled={!this.state.turn}>Undo</button>\n                    <button onClick={() => this.redo()} disabled={!(this.state.turn - history.length + 1)}>Redo</button>\n                </div>\n                <Board\n                    squares={current.squares}\n                    onClick={(i, j) => this.handleClick(i, j)}\n                    placed={current.placed}\n                />\n            </div>\n        );\n    }\n}\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            gameType: null\n        }\n    }\n    render() {\n        return(\n            <div className=\"app\">\n                <div className=\"header\">\n                    <h1>2 Player Othello</h1>\n                    <h4><a href=\"https://www.ultraboardgames.com/othello/game-rules.php\" target=\"_blank\" rel=\"noopener noreferrer\">How to play</a></h4>\n                </div>\n                <Game />\n            </div>\n        );\n    }\n}\n\n// =========================\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nfunction hasMoves(flipSquares, player) {\n    return !!flipSquares[player].reduce(\n                (sum, arr) => sum += arr.reduce(\n                    (sum, val) => sum += val.length, 0), 0);\n}"],"sourceRoot":""}