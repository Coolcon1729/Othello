{"version":3,"sources":["index.js"],"names":["Square","props","content","value","fillOpacity","fill","alert","className","onClick","Board","middle","Math","floor","newSquares","Array","map","x","newFlipSquares","push","state","squares","flipSquares","bIsNext","blackScore","whiteScore","i","j","this","slice","length","square","directions","regex","RegExp","n","m","direction","line","y","includes","test","setState","key","handleClick","status","items","row","renderSquare","size","React","Component","Game","Layout","ReactDOM","render","document","getElementById"],"mappings":"6OAMA,SAASA,EAAOC,GACZ,IAAIC,EACJ,OAAQD,EAAME,OACV,IAAK,IACDD,EAAU,GACV,MACJ,IAAK,IACDA,EAAU,6BAAK,4BAAQE,YAAY,OACnC,MACJ,IAAK,IACDF,EAAU,6BAAK,4BAAQE,YAAY,OAAOC,KAAK,aAC/C,MACJ,IAAK,IACDH,EAAU,6BAAK,4BAAQE,YAAY,OAAOC,KAAK,aAC/C,MACJ,QACIC,MAAM,+BAEd,OACI,4BACIC,UAAU,SACVC,QAASP,EAAMO,SACjBN,G,IAIJO,E,kDACF,WAAYR,GAAQ,IAAD,sBACf,cAAMA,GAGN,IAAMS,EAASC,KAAKC,MAAM,KAIpBC,EAAaC,MArCd,GAqC0BT,KAAK,MAAMU,KAAI,SAAAC,GAAC,OAAIF,MArC9C,GAqC0DT,KAAK,QAGpEQ,EAAWH,GAAQA,GAAUG,EAAWH,EAAS,GAAGA,EAAS,GAAK,IAClEG,EAAWH,GAAQA,EAAS,GAAKG,EAAWH,EAAS,GAAGA,GAAU,IAClEG,EAAWH,EAAS,GAAGA,GAAUG,EAAWH,GAAQA,EAAS,GAC7DG,EAAWH,EAAS,GAAGA,EAAS,GAAKG,EAAWH,EAAS,GAAGA,EAAS,GAAK,IAE1E,IAAMO,EAAiBH,MA7ClB,GA6C8BT,KAAK,MAAMU,KAAI,SAAAC,GAAC,OAAIF,MA7ClD,GA6C8DT,KAAK,MAAMU,KAAI,SAAAC,GAAC,MAAI,SAhBxE,OAiBfC,EAAeP,EAAS,GAAGA,GAAQQ,KAAK,CAACR,EAAQA,IACjDO,EAAeP,GAAQA,EAAS,GAAGQ,KAAK,CAACR,EAAQA,IACjDO,EAAeP,EAAS,GAAGA,EAAS,GAAGQ,KAAK,CAACR,EAAS,EAAGA,EAAS,IAClEO,EAAeP,EAAS,GAAGA,EAAS,GAAGQ,KAAK,CAACR,EAAS,EAAGA,EAAS,IAElE,EAAKS,MAAQ,CACTC,QAASP,EACTQ,YAAaJ,EACbK,SAAS,EACTC,WAAY,EACZC,WAAY,GA3BD,E,wDA8BPC,EAAGC,GACX,IAAMN,EAAUO,KAAKR,MAAMC,QAAQQ,QAC/BL,EAAaI,KAAKR,MAAMI,WACxBC,EAAaG,KAAKR,MAAMK,WAG5B,GAAKG,KAAKR,MAAME,YAAYI,GAAGC,GAAGG,OAAlC,CAGAT,EAAQK,GAAGC,GAAKC,KAAKR,MAAMG,QAAU,IAAM,IAC3CK,KAAKR,MAAMG,QAAUC,IAAeC,IAVtB,oBAWKG,KAAKR,MAAME,YAAYI,GAAGC,IAX/B,IAWd,2BAAiD,CAAC,IAAzCI,EAAwC,QAC7CV,EAAQU,EAAO,IAAIA,EAAO,IAAMH,KAAKR,MAAMG,QAAU,IAAM,IACvDK,KAAKR,MAAMG,SACXC,IACAC,MAEAA,IACAD,MAlBM,8BAmCd,IAZA,IAAMF,EAAcP,MAlFf,GAkF2BT,KAAK,MAAMU,KAAI,SAAAC,GAAC,OAAIF,MAlF/C,GAkF2DT,KAAK,MAAMU,KAAI,SAAAC,GAAC,MAAI,SAC9Ee,EAAa,CACf,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,EAAE,EAAG,GACL,EAAE,GAAI,GACN,CAAC,GAAI,GACL,CAAC,GAAI,IAEHC,EAAQ,IAAIC,OAAO,SAAWN,KAAKR,MAAMG,QAAU,IAAM,KAAO,KAAOK,KAAKR,MAAMG,QAAU,IAAM,MAC/FY,EAAI,EAAGA,EA9FX,EA8FqBA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EA/Ff,EA+FyBA,IACtB,GAAsB,MAAlBf,EAAQc,GAAGC,IAAgC,MAAlBf,EAAQc,GAAGC,GAAxC,CAD2B,oBAELJ,GAFK,IAE3B,2BAAkC,CAAC,IAA1BK,EAAyB,QAC1BC,EAAO,GACPrB,EAAIkB,EACJI,EAAIH,EACR,GACIE,GAAQjB,EAAQJ,GAAGsB,GACnBtB,GAAKoB,EAAU,GACfE,GAAKF,EAAU,SACVpB,GAAK,GAAKA,EAzG1B,GAyGsCsB,GAAK,GAAKA,EAzGhD,IAyG6DD,EAAKE,SAAS,OACpE,GAAIP,EAAMQ,KAAKH,GAGX,IAFArB,EAAIkB,EAAIE,EAAU,GAClBE,EAAIH,EAAIC,EAAU,GACXhB,EAAQJ,GAAGsB,MAAQX,KAAKR,MAAMG,QAAU,IAAM,MACjDD,EAAYa,GAAGC,GAAGjB,KAAK,CAACF,EAAGsB,IAC3BtB,GAAKoB,EAAU,GACfE,GAAKF,EAAU,IAjBA,+BAyBnC,IAAK,IAAIF,EAAI,EAAGA,EAxHX,EAwHqBA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAzHf,EAyHyBA,IACA,MAAlBf,EAAQc,GAAGC,IAAgC,MAAlBf,EAAQc,GAAGC,KACpCd,EAAYa,GAAGC,GAAGN,OAClBT,EAAQc,GAAGC,GAAK,IAEhBf,EAAQc,GAAGC,GAAK,KAM5BR,KAAKc,SAAS,CACVrB,QAASA,EACTC,YAAaA,EACbC,SAAUK,KAAKR,MAAMG,QACrBC,WAAYA,EACZC,WAAYA,O,mCAGPC,EAAGC,GAAI,IAAD,OACf,OACI,kBAAC1B,EAAD,CACI0C,IA/IH,EA+IejB,EAAIC,EAChBvB,MAAOwB,KAAKR,MAAMC,QAAQK,GAAGC,GAC7BlB,QAAS,kBAAM,EAAKmC,YAAYlB,EAAGC,Q,+BAM3C,IADA,IAQIkB,EARAC,EAAQ,GACHpB,EAAI,EAAGA,EAvJX,EAuJqBA,IAAK,CAE3B,IADA,IAAIqB,EAAM,GACDpB,EAAI,EAAGA,EAzJf,EAyJyBA,IACtBoB,EAAI5B,KAAKS,KAAKoB,aAAatB,EAAGC,IAElCmB,EAAM3B,KAAK,yBAAKX,UAAU,YAAYmC,IAAKjB,GAAIqB,IAYnD,OAPQF,EAFJjB,KAAKR,MAAMI,WAAaI,KAAKR,MAAMK,aAAewB,GAC9CrB,KAAKR,MAAMI,aAAeI,KAAKR,MAAMK,WAC/B,QAEA,UAAOG,KAAKR,MAAMI,WAAaI,KAAKR,MAAMK,WAAc,QAAU,QAAlE,mBAGJ,eAAWG,KAAKR,MAAMG,QAAU,QAAU,QAA1C,YAGN,6BACI,yBAAKf,UAAU,UACVqC,EACD,yBAAKrC,UAAU,gBAAf,UACYoB,KAAKR,MAAMI,WADvB,YAC4CI,KAAKR,MAAMK,aAG1DqB,O,GApJGI,IAAMC,WA0JpBC,E,uKAEE,OACI,yBAAK5C,UAAU,QACX,yBAAKA,UAAU,cACX,kBAACE,EAAD,Y,GALDwC,IAAMC,WAYnBE,E,uKAEE,OACI,yBAAK7C,UAAU,QACX,yBAAKA,UAAU,UACX,gDACA,4CAEJ,kBAAC4C,EAAD,W,GARKF,IAAMC,WAe3BG,IAASC,OAAO,kBAACF,EAAD,MAAYG,SAASC,eAAe,W","file":"static/js/main.eb09b931.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst size = 8;\n\nfunction Square(props) {\n    let content;\n    switch (props.value) {\n        case \" \":\n            content = \"\";\n            break;\n        case \"O\":\n            content = <svg><circle fillOpacity=\"0\"/></svg>;\n            break;\n        case \"B\":\n            content = <svg><circle fillOpacity=\"0.95\" fill=\"#101010\"/></svg>;\n            break;\n        case \"W\":\n            content = <svg><circle fillOpacity=\"0.95\" fill=\"#F0F0F0\"/></svg>;\n            break;\n        default:\n            alert(\"Something ain't right here.\");\n    }\n    return(\n        <button\n            className=\"square\"\n            onClick={props.onClick}\n        >{content}</button>\n    );\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // middle of the board\n        const middle = Math.floor((size - 1) / 2);\n\n        // holds the state of each square on the board\n        // W: White, B: Black, O: Open, \" \": Not Open\n        const newSquares = Array(size).fill(null).map(x => Array(size).fill(\" \"));\n        \n        // Initialize fresh board\n        newSquares[middle][middle] = newSquares[middle + 1][middle + 1] = \"W\";\n        newSquares[middle][middle + 1] = newSquares[middle + 1][middle] = \"B\";\n        newSquares[middle - 1][middle] = newSquares[middle][middle - 1] =\n        newSquares[middle + 1][middle + 2] = newSquares[middle + 2][middle + 1] = \"O\";\n\n        const newFlipSquares = Array(size).fill(null).map(x => Array(size).fill(null).map(x => []));\n        newFlipSquares[middle - 1][middle].push([middle, middle]);\n        newFlipSquares[middle][middle - 1].push([middle, middle]);\n        newFlipSquares[middle + 1][middle + 2].push([middle + 1, middle + 1]);\n        newFlipSquares[middle + 2][middle + 1].push([middle + 1, middle + 1]);\n\n        this.state = {\n            squares: newSquares,\n            flipSquares: newFlipSquares,\n            bIsNext: true,\n            blackScore: 2,\n            whiteScore: 2\n        };\n    }\n    handleClick(i, j) {\n        const squares = this.state.squares.slice();\n        let blackScore = this.state.blackScore;\n        let whiteScore = this.state.whiteScore;\n\n        // If it is not a valid square, do nothing.\n        if (!this.state.flipSquares[i][j].length) return;\n        \n        // Update the state of the squares and the value of the scores. (Flipping and Scoring)\n        squares[i][j] = this.state.bIsNext ? \"B\" : \"W\";\n        this.state.bIsNext ? blackScore++ : whiteScore++;\n        for (let square of this.state.flipSquares[i][j]) {\n            squares[square[0]][square[1]] = this.state.bIsNext ? \"B\" : \"W\";\n            if (this.state.bIsNext) {\n                blackScore++;\n                whiteScore--;\n            } else {\n                whiteScore++;\n                blackScore--;\n            }\n        }\n\n        // For each square on the board determine which squares will be flipped when clicked.\n        const flipSquares = Array(size).fill(null).map(x => Array(size).fill(null).map(x => []));\n        const directions = [\n            [1, 0],\n            [1, 1],\n            [0, 1],\n            [-1, 1],\n            [-1, 0],\n            [-1, -1],\n            [0, -1],\n            [1, -1]\n        ]\n        const regex = new RegExp(\"^[O ]\" + (this.state.bIsNext ? \"B\" : \"W\") + \"+\" + (this.state.bIsNext ? \"W\" : \"B\"));\n        for (let n = 0; n < size; n++) {\n            for (let m = 0; m < size; m++) {\n                if (squares[n][m] === \"W\" || squares[n][m] === \"B\") continue;\n                for (let direction of directions) {\n                    let line = \"\";\n                    let x = n;\n                    let y = m;\n                    do {\n                        line += squares[x][y];\n                        x += direction[0];\n                        y += direction[1];\n                    } while (x >= 0 && x < size && y >= 0 && y < size && !line.includes(\"  \"))\n                    if (regex.test(line)) {\n                        x = n + direction[0];\n                        y = m + direction[1];\n                        while (squares[x][y] === (this.state.bIsNext ? \"B\" : \"W\")) {\n                            flipSquares[n][m].push([x, y]);\n                            x += direction[0];\n                            y += direction[1];\n                        }\n                    }\n                }\n            }\n        }\n\n        // Update the state of each square based on the new flipSquare.\n        for (let n = 0; n < size; n++) {\n            for (let m = 0; m < size; m++) {\n                if (squares[n][m] === \"B\" || squares[n][m] === \"W\") continue;\n                if (flipSquares[n][m].length) {\n                    squares[n][m] = \"O\";\n                } else {\n                    squares[n][m] = \" \";\n                }\n            }\n        }\n\n        // Set the new state.\n        this.setState({\n            squares: squares,\n            flipSquares: flipSquares,\n            bIsNext: !this.state.bIsNext,\n            blackScore: blackScore,\n            whiteScore: whiteScore\n        });\n    }\n    renderSquare(i, j) {\n        return(\n            <Square\n                key={size * i + j}\n                value={this.state.squares[i][j]}\n                onClick={() => this.handleClick(i, j)}\n            />\n        );\n    }\n    render() {\n        let items = [];\n        for (let i = 0; i < size; i++) {\n            let row = [];\n            for (let j = 0; j < size; j++) {\n                row.push(this.renderSquare(i, j));\n            }\n            items.push(<div className=\"board-row\" key={i}>{row}</div>);\n        }\n        let status;\n        if (this.state.blackScore + this.state.whiteScore === size * size) {\n            if (this.state.blackScore === this.state.whiteScore) {\n                status = `Draw!`\n            } else {\n                status = `${(this.state.blackScore > this.state.whiteScore) ? \"Black\" : \"White\"} is the winner!`\n            }\n        } else {\n            status = `It's ${this.state.bIsNext ? \"Black\" : \"White\"}'s turn!`\n        }\n        return(\n            <div>\n                <div className=\"status\">\n                    {status}\n                    <div className=\"scoreDisplay\">\n                        Black: {this.state.blackScore}  White: {this.state.whiteScore}\n                    </div>\n                </div>\n                {items}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return(\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Layout extends React.Component {\n    render() {\n        return(\n            <div className=\"page\">\n                <div className=\"header\">\n                    <h1>2 Player Othello</h1>\n                    <h4>How to play</h4>\n                </div>\n                <Game />\n            </div>\n        );\n    }\n}\n\n// =========================\nReactDOM.render(<Layout />, document.getElementById(\"root\"));"],"sourceRoot":""}